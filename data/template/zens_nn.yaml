!obj:pylearn2.train.Train {
    # The "&train" syntax lets us refer back to this object as "*train" elsewhere in the yaml file
    dataset: &train !obj:train_pylearn.CSVDataset {
        path: '${TRAIN_DATA_FILE}',
    },
    # Here we specify the model to train as being an MLP
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 100000,
        layers : [
            # We use two hidden layers with rectified linear activations
            !obj:pylearn2.models.mlp.RectifiedLinear {
                layer_name: 'h0',
                dim: 100,
                irange: .05,
                # Rather than using weight decay, we constrain the norms of the weight vectors
                # max_col_norm: 2.,
            },
            !obj:pylearn2.models.mlp.Softmax {
                layer_name: 'y',
                init_bias_target_marginals: *train,
                # Initialize the weights to all 0s
                irange: .0,
                n_classes: 2,
            }
        ],
        nvis: ${N_FEATURES},
    },
    # We train using SGD and momentum
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .05,
        train_iteration_mode: 'even_shuffled_sequential',
        monitor_iteration_mode : 'even_shuffled_sequential', 
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .05,
            nesterov_momentum: True,
        },
        # We monitor how well we're doing during training on a validation set
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:train_pylearn.CSVDataset {
                    path: '${VAL_DATA_FILE}',
                }
            },
        # We stop when validation set classification error hasn't decreased for 10 epochs
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: 'valid_objective',
            prop_decrease: 0.,
            N: 10
        },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            default_input_include_prob: .5,
            default_input_scale: 2.,
        },
    },
    # We save the model whenever we improve on the validation set classification error
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: '${MODEL_FILE}'
        },
    ],
    save_freq: 0,
}
