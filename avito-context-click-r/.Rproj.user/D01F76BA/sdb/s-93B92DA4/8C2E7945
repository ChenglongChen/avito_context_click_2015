{
    "contents" : "##############################################################\n## load data\n##############################################################\ntic()\ncat(\"Loading csv data... \\n\")\n\nfn.register.wk(1)\ntmp <- foreach(tmp=1, .noexport=all.noexport) %dopar% {\n  \n  fn.init.worker('data_build/load_data')\n  \n  data.all.search.info <- fread(fn.in.file(search.info.file))\n  data.all.search.info[, SearchDate := as.numeric(fn.parse.date(SearchDate)) ]\n  data.all.search.info <- data.all.search.info[order(SearchID)]\n  \n  russian.alphabet <- c(\"а|б|в|г|д|е|ж|з|и|й|к|л|м|н|о|п|р|с|т|у|ф|х|ц|ч|ш|щ|ъ|ы|ь|э|ю|я\")\n  data.all.search.info[, SearchRussian := \n                         as.numeric(SearchQuery %like% russian.alphabet)]\n\n  data.all.search.info[, SearchParamsSZ := nchar(SearchParams)]\n  data.all.search.info[, SearchQuerySZ := nchar(SearchQuery)]\n  \n  param.breaks <- sort(unique(c(-1, 0, 1, 3, 10, 20, Inf)))\n  data.all.search.info[, SearchParamsSZBin := \n                         cut(SearchQuerySZ, labels=F, breaks=param.breaks)]\n  \n  qry.breaks <- sort(unique(c(-1, 0, 1, 2, 3, 10, 20, 35, 1000)))\n  data.all.search.info[, SearchQuerySZBin := \n                         cut(SearchQuerySZ, labels=F, breaks=qry.breaks)]\n  \n  data.all.search.info.disc <- data.all.search.info[\n    , list(SearchID, SearchParamsSZBin, SearchQuerySZBin)]\n  \n  data.all.search.info.cont <- data.all.search.info[\n    , list(SearchID, SearchParamsSZ, SearchQuerySZ)]\n  \n  data.all.search.info[, SearchParams := NULL]\n  data.all.search.info[, SearchQuery := NULL]\n  data.all.search.info[, SearchParamsSZ := NULL]\n  data.all.search.info[, SearchQuerySZ := NULL]\n  data.all.search.info[, SearchParamsSZBin := NULL]\n  data.all.search.info[, SearchQuerySZBin := NULL]\n  \n  data.all.search.ip.count <- data.all.search.info[\n    ,list(CountIPUser=length(unique(UserID))), by=\"IPID\"]\n  ipuser.breaks <- sort(unique(c(-Inf, 1, 3, 10, Inf)))\n  data.all.search.ip.count[, CountIPUserBin := \n                         cut(CountIPUser, labels=F, breaks=ipuser.breaks)]\n  \n  data.all.search.ip.count <- merge(\n    data.all.search.info[,list(SearchID, IPID)], \n    data.all.search.ip.count,\n    by=\"IPID\")[order(SearchID)]\n  \n  fn.check.searchid(data.all.search.ip.count, \n                    data.all.search.info.cont,\n                    data.all.search.info.disc)\n  \n  data.all.search.info.cont[\n    , CountIPUser := data.all.search.ip.count$CountIPUser]\n  data.all.search.info.disc[\n    , CountIPUserBin := data.all.search.ip.count$CountIPUserBin]\n  \n  rm(data.all.search.ip.count)\n  \n  data.all.search.user.count <- data.all.search.info[\n    ,list(\n      CountUserSearchLocation=length(unique(LocationID)),\n      CountUserSearchCategory=length(unique(CategoryID)),\n      CountUserSearch=length(unique(SearchID))\n      ), by=\"UserID\"]\n  \n  user.loc.breaks <- sort(unique(c(-Inf, 1, 2, 3, 5, Inf)))\n  data.all.search.user.count[, CountUserSearchLocationBin := \n                             cut(CountUserSearchLocation, labels=F, \n                                 breaks=user.loc.breaks)]\n  \n  user.cat.breaks <- sort(unique(c(-Inf, 1, 2, 3, 7, Inf)))\n  data.all.search.user.count[, CountUserSearchCategoryBin := \n                               cut(CountUserSearchCategory, labels=F, \n                                   breaks=user.cat.breaks)]\n  \n  user.srch.breaks <- sort(unique(c(-Inf, 1, 2, 3, 10, 30, 100, Inf)))\n  data.all.search.user.count[, CountUserSearchBin := \n                               cut(CountUserSearch, labels=F, \n                                   breaks=user.srch.breaks)]\n  \n  data.all.search.user.count <- merge(\n    data.all.search.info[,list(SearchID, UserID)], \n    data.all.search.user.count,\n    by=\"UserID\")[order(SearchID)]\n  \n  fn.check.searchid(data.all.search.user.count, \n                    data.all.search.info.cont,\n                    data.all.search.info.disc)\n  \n  for (col.nam in c(\"CountUserSearchLocation\", \"CountUserSearchCategory\",\n                    \"CountUserSearch\")){\n    data.all.search.info.cont[\n      , col.nam := data.all.search.user.count[[col.nam]], with=F]\n    col.nam.bin <- paste0(col.nam,\"Bin\")\n    data.all.search.info.disc[\n      , col.nam.bin := data.all.search.user.count[[col.nam.bin]], with=F]\n  }\n  \n  \n  rm(data.all.search.user.count)\n\n  Store(data.all.search.info, data.all.search.info, data.all.search.info.cont,\n        data.all.search.info.disc)\n  invisible(gc(T))\n\n  data.tr <- fread(fn.in.file(train.file))\n  data.tr <- data.tr[, ID := -(SearchID*10 + Position)]\n  setcolorder(data.tr, c(\"ID\", \"SearchID\", \"IsClick\", \"AdID\", \"Position\", \n                         \"HistCTR\", \"ObjectType\"))\n  \n  data.test <- fread(fn.in.file(test.file))\n  data.test[, IsClick := NA_integer_]\n  \n  data.all.search.full <- rbind(\n    data.tr, \n    data.test\n  )[order(ID)]\n  \n  rm(data.tr, data.test)\n  invisible(gc(T))\n  \n  data.all.search <- data.all.search.full[ObjectType == 3]\n  data.all.search[, ObjectType := NULL]\n  ctr.breaks <- sort(unique(c(seq(0,0.05,0.005), seq(0.05,0.1,0.01), \n                              0.2, 0.3, 0.5, 1)))\n  setnames(data.all.search, \"HistCTR\", \"AdHistCTR\")\n  data.all.search[, AdHistCTRBin := cut(AdHistCTR, labels=F, breaks=ctr.breaks)]\n  \n  data.all.search.cont <- data.all.search[, list(ID, AdHistCTR)]\n  data.all.search.disc <- data.all.search[, list(ID, AdHistCTRBin)]\n  \n  data.all.search[, AdHistCTR := NULL]\n  data.all.search[, AdHistCTRBin := NULL]\n\n  fn.check.id(data.all.search, data.all.search.cont, data.all.search.disc)\n  \n  Store(data.all.search, data.all.search.cont, data.all.search.disc)\n  invisible(gc(T))\n  \n  data.all.search.full[, HistCTR := NULL]\n  \n  Store(data.all.search.full)\n  invisible(gc(T))\n  \n  \n  data.all.search.count <- data.all.search.full[\n    , list(SearchAdCount=.N, \n           SearchAdT1Count=sum(ObjectType==1),\n           SearchAdT2Count=sum(ObjectType==2),\n           SearchAdT3Count=sum(ObjectType==3))\n    , by=\"SearchID\"]\n  fn.soar.unload(data.all.search.full)\n  invisible(gc(T))\n  \n  data.all.search.info <- merge(data.all.search.info, \n                                data.all.search.count,\n                                by=\"SearchID\")[order(SearchID)]\n  rm(data.all.search.count)\n  \n  fn.check.searchid(data.all.search.info)\n  Store(data.all.search.info)\n  invisible(gc(T))\n  \n  \n  data.user.ad.info <- merge(\n    data.all.search.full, data.all.search.info[ , list(SearchID, UserID)],\n    by=\"SearchID\")\n  fn.soar.unload(data.all.search.full, data.all.search.info)\n  \n  data.user.ad.info <- data.user.ad.info[\n    ,list(\n      CountUserAd = length(unique(AdID)),\n      CountUserAdT1 = length(unique(AdID[ObjectType==1])),\n      CountUserAdT3 = length(unique(AdID[ObjectType==3])),\n      CountUserAdDupT1 = sum(duplicated(AdID[ObjectType==1])),\n      CountUserAdDupT3 = sum(duplicated(AdID[ObjectType==3]))\n    ), by=\"UserID\"\n  ]\n  \n  user.ad.break <- c(0,1,3,10,30,100,Inf)\n  data.user.ad.info[, CountUserAdBin := cut(CountUserAd, labels=F, \n                                            breaks=user.ad.break)]\n  user.adt1.break <- c(-1,0,1,3,10,30,100,Inf)\n  data.user.ad.info[, CountUserAdT1Bin := cut(CountUserAdT1, labels=F, \n                                            breaks=user.adt1.break)]\n  user.adt3.break <- c(-1,0,1,3,10,30,100,Inf)\n  data.user.ad.info[, CountUserAdT3Bin := cut(CountUserAdT3, labels=F, \n                                              breaks=user.adt3.break)]\n  \n  user.adt1.dup.break <- c(-1,0,10,30,100,Inf)\n  data.user.ad.info[, CountUserAdDupT1Bin := cut(CountUserAdDupT1, labels=F, \n                                              breaks=user.adt1.dup.break)]\n  \n  user.adt3.dup.break <- c(-1,0,3,30,100,Inf)\n  data.user.ad.info[, CountUserAdDupT3Bin := cut(CountUserAdDupT3, labels=F, \n                                                 breaks=user.adt3.dup.break)]\n  \n  data.user.ad.info <- merge(\n    data.all.search.info[, list(SearchID, UserID)], \n    data.user.ad.info,\n    by=\"UserID\")[order(SearchID)]\n  \n  fn.check.searchid(data.user.ad.info, data.all.search.info.cont, \n                    data.all.search.info.disc)\n  \n  for (col.nam in c(\"CountUserAd\", \"CountUserAdT1\", \"CountUserAdT3\",\n                    \"CountUserAdDupT1\", \"CountUserAdDupT3\")){\n    data.all.search.info.cont[\n      , col.nam := data.user.ad.info[[col.nam]], with=F]\n    col.nam.bin <- paste0(col.nam,\"Bin\")\n    data.all.search.info.disc[\n      , col.nam.bin := data.user.ad.info[[col.nam.bin]], with=F]\n  }\n  \n  rm(data.user.ad.info)\n  Store(data.all.search.info.cont, data.all.search.info.disc)\n  invisible(gc(T))\n  \n  data.ad.info <- merge(data.all.search, data.all.search.info, by=\"SearchID\")\n  fn.soar.unload(data.all.search, data.all.search.info)\n  \n  data.ad.info <- data.ad.info[\n    ,list(\n      ID=ID,\n      CountAdSearch = length(unique(SearchID)),\n      RatioAdPos1 = sum(Position==1)/.N,\n      CountAdUsers = length(unique(UserID)),\n      CountAdSearchLoc = length(unique(LocationID)),\n      CountAdSearchCat = length(unique(CategoryID)),\n      RatioSearchRuss = sum(SearchRussian==1)/.N\n    ), by=\"AdID\"\n  ][order(ID)]\n  data.ad.info[, AdID:=NULL]\n  \n  cur.break <- c(0, 10^seq(2,8,0.5))\n  data.ad.info[, CountAdSearchBin := \n                 cut(CountAdSearch, labels=F, breaks=cur.break)]\n  \n  cur.break <- c(-Inf,seq(0,1,0.1))\n  data.ad.info[, RatioAdPos1Bin := \n                 cut(RatioAdPos1, labels=F, breaks=cur.break)] \n  \n  cur.break <- c(0, 10^seq(2,8,0.5))\n  data.ad.info[, CountAdUsersBin := \n                 cut(CountAdUsers, breaks=cur.break, labels=F)]\n  \n  cur.break <- c(0, 10^seq(0.5,4,0.25))\n  data.ad.info[, CountAdSearchLocBin := \n                 cut(CountAdSearchLoc, breaks=cur.break, labels=F)]\n  \n  cur.break <- c(0:5)\n  data.ad.info[, CountAdSearchCatBin := \n                 cut(CountAdSearchCat, breaks=cur.break, labels=F)]\n  \n  cur.break <- c(-Inf,seq(0,1,0.1))\n  data.ad.info[, RatioSearchRussBin := \n                 cut(RatioSearchRuss, labels=F, breaks=cur.break)] \n  \n  fn.check.id(data.ad.info, data.all.search.cont, data.all.search.disc)\n  \n  for (col.nam in setdiff(colnames(data.ad.info), \"ID\")){\n    if (col.nam %like% 'Bin$') {\n      data.all.search.disc[\n      , col.nam := data.ad.info[[col.nam]], with=F]\n    } else {\n      data.all.search.cont[\n      , col.nam := data.ad.info[[col.nam]], with=F]\n    }\n  }\n  rm(data.ad.info)\n  invisible(gc(T))\n  Store(data.all.search.cont, data.all.search.disc)\n  invisible(gc(T))\n  \n  \n  fn.shift.itvl <- function(x, n=length(x)) c(NA_real_, x[-n])\n  fn.prev.itvl <- function(x, n=length(x)) x - fn.shift.itvl(x)\n  \n  data.all.search.interval <- data.all.search.info[\n    order(SearchDate),\n    list(\n      SearchID=SearchID,\n      UserQryTotalTime=SearchDate-min(SearchDate),\n      UserPrevQryDate = fn.prev.itvl(x=SearchDate),\n      UserPrevPrevQryDate = fn.shift.itvl(fn.prev.itvl(x=SearchDate)) + \n        fn.prev.itvl(x=SearchDate),\n      UserPrevPrevPrevQryDate = fn.shift.itvl(fn.shift.itvl(\n        fn.prev.itvl(x=SearchDate))) + fn.shift.itvl(fn.prev.itvl(x=SearchDate)) + \n        fn.prev.itvl(x=SearchDate)\n    ), by=\"UserID\"\n    ][order(SearchID)]\n  data.all.search.interval[, UserID := NULL]\n\n  data.all.search.interval[is.na(UserPrevQryDate), UserPrevQryDate:= 10000000]\n  data.all.search.interval[is.na(UserPrevPrevQryDate), UserPrevPrevQryDate:= 10000000]\n  data.all.search.interval[is.na(UserPrevPrevPrevQryDate), UserPrevPrevPrevQryDate:= 10000000]\n  \n  qry.int.breaks <- round(sort(unique(c(-1, 0, 10^(seq(0, 8, 0.5))))))\n  data.all.search.interval[, UserQryTotalTimeBin := \n                         cut(UserQryTotalTime, labels=F, breaks=qry.int.breaks)]\n  data.all.search.interval[, UserPrevQryDateBin := \n                         cut(UserPrevQryDate, labels=F, breaks=qry.int.breaks)]\n  data.all.search.interval[, UserPrevPrevQryDateBin := \n                         cut(UserPrevPrevQryDate, labels=F, \n                             breaks=qry.int.breaks)]\n  data.all.search.interval[, UserPrevPrevPrevQryDateBin := \n                         cut(UserPrevPrevPrevQryDate, labels=F, \n                             breaks=qry.int.breaks)]\n  \n  fn.check.searchid(data.all.search.interval, data.all.search.info.cont, \n                    data.all.search.info.disc)\n  \n  cols.set <- setdiff(colnames(data.all.search.interval), \"SearchID\")\n  cols.set <- cols.set[!cols.set %like% 'Bin$']\n  for (col.nam in cols.set){\n    data.all.search.info.cont[\n      , col.nam := data.all.search.interval[[col.nam]], with=F]\n    col.nam.bin <- paste0(col.nam,\"Bin\")\n    data.all.search.info.disc[\n      , col.nam.bin := data.all.search.interval[[col.nam.bin]], with=F]\n  }\n  \n  rm(data.all.search.interval)\n  invisible(gc(T))\n  \n  Store(data.all.search.info.cont, data.all.search.info.disc)\n  invisible(gc(T))\n  \n  data.all.search.type <- data.all.search.info[\n    order(UserID, SearchDate),\n    list(\n      SearchID = SearchID[order(SearchDate)],\n      SearchDate = sort(SearchDate),\n      SearchOrdUsrDesc = .N:1,\n      SearchOrdUsrAsc = 1:.N\n    ) ,by=\"UserID\"]\n  data.all.search.type[\n    , SearchType := factor(\"hist\", levels=c(\"hist\", \"tr\", \"val\", \"test\"))]\n  data.all.search.type[\n    SearchID %in% unique(data.all.search[ID > 0]$SearchID),\n    SearchType := \"test\"\n  ]\n  test.min.date <- min(data.all.search.type[SearchType %in% \"test\", \n                                            list(SearchDate)])\n  data.all.search.type[\n    SearchType  == \"hist\" & SearchOrdUsrDesc %in% 1:3\n     & SearchDate >= test.min.date,\n    SearchType := \"val\"\n  ]\n  data.all.search.type[\n    SearchType  == \"hist\" & SearchOrdUsrDesc %in% 4:6\n     & SearchDate >= test.min.date,\n    SearchType := \"tr\"\n  ]\n  data.all.search.type <- data.all.search.type[\n    order(SearchID), \n    list(SearchID, SearchOrdUsrAsc, SearchOrdUsrDesc, SearchType)]\n  \n  fn.check.searchid(data.all.search.info, data.all.search.type)\n  \n  data.all.search.info[, SearchOrdUsrAsc := data.all.search.type$SearchOrdUsrAsc]\n  data.all.search.info[, SearchOrdUsrDesc := data.all.search.type$SearchOrdUsrDesc]\n  data.all.search.info[, SearchType := data.all.search.type$SearchType]\n  \n  setnames(data.all.search.info, \n           c(\"IPID\", \"IsUserLoggedOn\", \"LocationID\", \"CategoryID\"),\n           c(\"UserIPID\", \"UserLogged\", \"SearchLocID\", \"SearchCatID\"))\n    \n  rm(data.all.search.type)\n  Store(data.all.search.info)\n  invisible(gc(T))\n  \n  \n\n  data.all.user <- fread(fn.in.file(user.info.file))\n  \n  cols.search <- colnames(data.all.search.info)\n  data.all.search.info <- merge(data.all.search.info,\n                                data.all.user,\n                                all.x=T,\n                                by=\"UserID\")[order(SearchID)]\n  fn.check.searchid(data.all.search.info)\n  cols.usr <- setdiff(colnames(data.all.user), \"UserID\")\n  for (col.nam in cols.usr) {\n      setnames(data.all.search.info, col.nam, 'change_val')\n      data.all.search.info[is.na(change_val), change_val := -1]\n      setnames(data.all.search.info, 'change_val', col.nam)\n  }\n  fn.check.searchid(data.all.search.info)\n  \n  col.ord <- unique(c(cols.search, cols.usr))\n  setcolorder(data.all.search.info, col.ord)\n  Store(data.all.user, data.all.search.info)\n  invisible(gc(T))\n  \n  \n  \n  data.all.cat <- fread(fn.in.file(category.file))\n  Store(data.all.cat)\n  invisible(gc(T))\n  \n  \n  \n  data.all.phone <- fread(fn.in.file(phone.request.stream.file))\n  data.all.phone[, PhoneRequestDate := as.numeric(fn.parse.date(PhoneRequestDate))]\n  data.all.phone <- data.all.phone[order(PhoneRequestDate)]\n  \n  ids.phone.ad <- sort(unique(data.all.phone$AdID))\n  ids.phone.search <- sort(unique(\n    data.all.search.full[AdID %in% ids.phone.ad]$SearchID))\n  data.phone.search.info <- merge(\n    data.all.search.full[SearchID %in% ids.phone.search], \n    data.all.search.info[SearchID %in% ids.phone.search, \n                         list(SearchID, SearchDate, UserIPID, UserID)],\n    by=\"SearchID\")\n  fn.soar.unload(data.all.search.info, data.all.search.full)\n  invisible(gc(T))\n  data.phone.search.info <- merge(data.phone.search.info,\n                                  data.all.phone,\n                                  by=c(\"UserID\", \"AdID\"))\n  \n  Store(data.all.phone)\n  invisible(gc(T))\n  \n  data.phone.search.info <- data.phone.search.info[\n    PhoneRequestDate <= SearchDate]\n  \n  data.all.phone.info <- data.phone.search.info[\n    ,list(\n      UserPrevPhoneRequest = 1\n      )\n    ,by=c(\"SearchID\")\n  ]\n  setkeyv(data.all.phone.info, \"SearchID\")\n  \n  data.all.phone.info <- data.all.phone.info[J(data.all.search.info$SearchID)]\n  data.all.phone.info[, UserPrevPhoneRequest := \n                        as.integer(!is.na(UserPrevPhoneRequest))]\n\n  fn.check.searchid(data.all.phone.info, data.all.search.info)\n  data.all.search.info[, UserPrevPhoneRequest := data.all.phone.info$UserPrevPhoneRequest]\n  \n  rm(data.phone.search.info, ids.phone.ad, ids.phone.search)\n  Store(data.all.phone.info, data.all.search.info)\n  invisible(gc(T))\n  \n  data.all.visits <- fread(fn.in.file(visit.stream.file))\n  data.all.visits[, ViewDate := as.numeric(fn.parse.date(ViewDate))]\n  data.all.visits <- data.all.visits[order(ViewDate)]\n  Store(data.all.visits)\n  invisible(gc(T))\n  \n  data.visits.search.info <- merge(\n    data.all.search.full, \n    data.all.search.info[, list(SearchID, SearchDate, UserIPID, UserID)],\n    by=\"SearchID\")\n  \n  fn.soar.unload(data.all.search.info, data.all.search.full)\n  invisible(gc(T))\n  \n  data.visits.search.info <- merge(data.visits.search.info,\n                                  data.all.visits,\n                                  by=c(\"UserID\", \"AdID\"))\n  fn.soar.unload(data.all.visits)\n  invisible(gc(T))\n  \n  data.visits.search.info <- data.visits.search.info[\n    SearchDate >= ViewDate | ID >0]\n  \n  Store(data.visits.search.info)\n  \n  data.all.visits.info <- data.visits.search.info[\n    ,list(\n      UserPrevVisitReq = .N,\n      UserPrevVisitReqUni = length(unique(AdID))\n    )\n    ,by=c(\"SearchID\")\n    ]\n  setkeyv(data.all.visits.info, \"SearchID\")\n  \n  data.all.visits.info <- data.all.visits.info[J(data.all.search.info$SearchID)]\n  visit.breaks <- sort(unique(c(-1, 0, 1, Inf)))\n  data.all.visits.info[is.na(UserPrevVisitReq), UserPrevVisitReq:=0]\n  data.all.visits.info[, UserPrevVisitReq := \n                         cut(UserPrevVisitReq, label=F, breaks=visit.breaks)]\n  data.all.visits.info[is.na(UserPrevVisitReqUni), UserPrevVisitReqUni:=0]\n  data.all.visits.info[, UserPrevVisitReqUni := \n                         cut(UserPrevVisitReqUni, label=F, breaks=visit.breaks)]\n\n  \n  fn.check.searchid(data.all.visits.info, data.all.search.info)\n  data.all.search.info[, UserPrevVisitReq := data.all.visits.info$UserPrevVisitReq]\n  data.all.search.info[, UserPrevVisitReqUni := data.all.visits.info$UserPrevVisitReqUni]\n  \n  rm(data.visits.search.info, ids.visits.ad, ids.visits.search)\n  Store(data.all.visits.info, data.all.search.info)\n  invisible(gc(T))\n\n  \n  \n  data.all.ad <- fread(fn.in.file(ads.info.file))\n  data.all.ad <- data.all.ad[\n    AdID %in% unique(data.all.search$AdID)]\n  \n  data.all.ad[is.na(CategoryID), CategoryID := -1]\n  data.all.ad[is.na(Price), Price := -1]\n  \n  ad.price.breaks <- c(c(-Inf, 0), 10^(1:6), 130000000)\n  data.all.ad[, PriceBin := cut(Price, labels=F, breaks=ad.price.breaks)]\n  \n  data.all.ad[, TitleSZ := nchar(Title)]\n  ad.title.breaks <- c(-1, 10, 30, 100)\n  data.all.ad[, TitleSZBin := cut(TitleSZ, labels=F, breaks=ad.title.breaks)]\n  \n  data.all.ad[, Params := as.integer(factor(Params))]\n  \n  data.all.ad[, Title := NULL]\n  data.all.ad[, LocationID := NULL]\n  data.all.ad[, IsContext := NULL]\n  \n  setnames(data.all.ad, \n           c(\"CategoryID\", \"Price\", \"PriceBin\", \"Params\", \n             \"TitleSZ\", \"TitleSZBin\"),\n           c(\"AdCatID\", \"AdPrice\", \"AdPriceBin\", \"AdParams\", \n             \"AdTitleSZ\", \"AdTitleSZBin\"))\n  \n  data.all.ad.info <- merge(data.all.ad,\n                            data.all.search[, list(ID, AdID)],\n                            by=\"AdID\")[order(ID)]\n  \n  Store(data.all.ad)\n  invisible(gc(T))\n  \n  fn.check.id(data.all.search, data.all.ad.info)\n\n  data.all.search[, AdCatID:= data.all.ad.info$AdCatID]\n  data.all.search[, AdParams:= data.all.ad.info$AdParams]\n  \n  Store(data.all.search)\n  invisible(gc(T))\n  \n  fn.check.id(data.all.search.disc, data.all.ad.info)\n  \n  data.all.search.disc[, AdPriceBin:= data.all.ad.info$AdPriceBin]\n  data.all.search.disc[, AdTitleSZBin:= data.all.ad.info$AdTitleSZBin]\n  \n  Store(data.all.search.disc)\n  \n  fn.check.id(data.all.search.cont, data.all.ad.info)\n  \n  data.all.search.cont[, AdPrice:= data.all.ad.info$AdPrice]\n  data.all.search.cont[, AdTitleSZ:= data.all.ad.info$AdTitleSZ]\n  \n  Store(data.all.search.cont)\n  \n  rm(data.all.ad.info)\n  invisible(gc(T))\n  \n  \n\n  data.all.search <- merge(\n    data.all.search, \n    data.all.search.info[, list(SearchID, SearchType)],\n    by=\"SearchID\")[order(ID)]\n  \n  col.first <- c(\"ID\", \"IsClick\", \"SearchType\", \"SearchID\")\n  col.ord <- c(col.first,\n               sort(setdiff(colnames(data.all.search), col.first)))\n  setcolorder(data.all.search, col.ord)\n\n  data.all.out.full <- data.all.search[, list(ID, IsClick, Position)]\n  setkey(data.all.out.full, ID)\n  Store(data.all.out.full)\n  invisible(gc(T))\n\n  Store(data.all.search)\n  invisible(gc(T))\n  \n  data.all.search.info.ord <- data.all.search.info[\n    , list(SearchID, SearchDate, SearchOrdUsrDesc, SearchType)]\n  \n  data.all.search.info[, SearchType:= NULL]\n  \n  data.tr.search.ids <- data.all.search.info.ord[\n    SearchType == \"hist\" & SearchOrdUsrDesc <= 7, SearchID]\n  \n\n  Store(data.all.search.info, data.all.search.info.ord,\n        data.tr.search.ids)\n  \n  data.all.search.small <- data.all.search[\n    SearchType != \"hist\"]\n  fn.soar.unload(data.all.search)\n  \n  data.all.out.small <- data.all.search.small[, list(ID, IsClick, Position)]\n  Store(data.all.search.small, data.all.out.small)\n  invisible(gc(T))\n\n  fn.clean.worker()\n}\nfn.kill.wk()\n\ntoc()\n\n##############################################################\n## create linear features data\n##############################################################\ntic()\ncat(\"Linear features data... \\n\")\n\nfn.register.wk(1)\ntmp <- foreach(tmp=1, .noexport=all.noexport) %dopar% {\n  \n  fn.init.worker('data_build/build_lr')\n  \n  cat(\"\\nCreating dataset\\n\")\n  setkey(data.all.search.info, SearchID)\n  setkey(data.all.search.info.disc, SearchID)\n  data.all.lr <- merge(data.all.search.info, \n                       data.all.search.info.disc, \n                       by=\"SearchID\")\n  fn.soar.unload(data.all.search.info, data.all.search.info.disc)\n  \n  setkey(data.all.lr, SearchID)\n  data.all.lr <- data.all.lr[J(data.all.search$SearchID)]\n  \n  if (!all(data.all.lr$SearchID == data.all.search$SearchID)) {\n    stop('SearchIDs do not match')\n  }\n  data.all.lr[, ID := data.all.search$ID]\n  \n  fn.to.data.all.lr <- function(data.add) {\n    fn.check.id(data.all.lr, data.add)\n    for (col.nam in colnames(data.add)) {\n      if (col.nam %ni% colnames(data.all.lr)) {\n        print (col.nam)\n        data.all.lr[, col.nam := data.add[[col.nam]], with=F]\n      }\n    }\n    invisible(NULL)\n  }\n  \n  fn.to.data.all.lr(data.all.search)\n  fn.soar.unload(data.all.search)\n  \n  fn.to.data.all.lr(data.all.search.disc)\n  fn.soar.unload(data.all.search.disc)\n\n  setkeyv(data.all.lr, c(\"SearchDate\", \"SearchID\", \"Position\"))\n\n  cat(\"\\nRemoving NAs\\n\")\n  cols.extra <- c(\"ID\", \"SearchID\", \"SearchType\", \"IsClick\", \"SearchDate\")\n  cols.in <- sort(setdiff(colnames(data.all.lr), cols.extra))\n  \n  for (col.nam in cols.in) {\n    if (any(is.na(data.all.lr[[col.nam]]))) {\n      setnames(data.all.lr, col.nam, 'change_val')\n      data.all.lr[is.na(change_val), change_val := -1]\n      setnames(data.all.lr, 'change_val', col.nam)\n    }\n  }\n  \n  invisible(gc())\n  \n  cat(\"\\nSaving dataset data...\\n\")\n  setcolorder(data.all.lr, c(cols.extra, cols.in))\n  Store(data.all.lr)\n  invisible(gc())\n  \n  cat(\"\\nSaving dataset csv\\n\")\n  fn.write.csv.chunk(data=data.all.lr,\n                     file=fn.out.file(\"data.all.lr.csv\"),\n                     compress=F)\n\n  cat(\"\\nSaving small version of dataset\\n\")  \n  cols.in.small <- c(\n    \"AdID\", \"AdCatID\",  \"AdParams\",\n    \"UserID\", \"UserIPID\", \"UserAgentID\", \n    \"UserAgentOSID\", \"UserDeviceID\", \"UserAgentFamilyID\",\n    \"SearchLocID\", \"SearchCatID\"\n  )\n  data.all.lr.small <- data.all.lr[\n    , unique(c(cols.extra, \"SearchDate\", cols.in.small)), with=F]\n  fn.soar.unload(data.all.lr)\n  Store(data.all.lr.small)\n  invisible(gc())\n\n  data.all.lr.id <- data.all.lr.small[\n    SearchType != \"hist\",\n    c(cols.extra, \"SearchDate\"), with=F]\n  fn.soar.unload(data.all.lr.small)\n  Store(data.all.lr.id)\n  invisible(gc())\n  \n  fn.clean.worker()\n}\nfn.kill.wk()\n\ntoc()\n\n\n##############################################################\n## Probability features\n##############################################################\ntic()\ncat(\"Probability features data... \\n\")\n\nfn.register.wk(1)\ntmp <- foreach(tmp=1, .noexport=all.noexport) %dopar% {\n  \n  fn.init.worker('data_build/prob_features')\n  \n  cols.in.1way <-c(\n    \"AdID\", \"AdCatID\",  \"AdParams\",\n    \"UserID\", \"UserIPID\", \"UserAgentID\", \n    \"UserAgentOSID\", \"UserDeviceID\", \"UserAgentFamilyID\",\n    \"SearchLocID\", \"SearchCatID\"\n  )\n  \n  data.all.prob.1way <- fn.build.prob(cols.in.1way)\n  Store(data.all.prob.1way)\n  \n  cols.in.2way <-c(\n    \"AdID\", \"AdCatID\",\n    \"UserID\", \"UserIPID\", \"UserAgentOSID\", \"UserAgentFamilyID\",\n    \"SearchLocID\", \"SearchCatID\"\n  )\n  cols.in.2way <- cols.in.1way\n  \n  data.all.prob.2way.ad.us <- fn.build.prob(\n    fn.build.interaction(cols.in.2way, c(\"Ad\", \"Us\")))\n  Store(data.all.prob.2way.ad.us)\n  \n  data.all.prob.2way.ad.srch <- fn.build.prob(\n    fn.build.interaction(cols.in.2way, c(\"Ad\", \"Search\")))\n  Store(data.all.prob.2way.ad.srch)\n  \n  data.all.prob.2way.us.srch <- fn.build.prob(\n    fn.build.interaction(cols.in.2way, c(\"Us\", \"Search\")))\n  Store(data.all.prob.2way.us.srch)\n  \n  data.all.prob.2way.srch <- fn.build.prob(\n    fn.build.interaction(cols.in.2way, c(\"Search\", \"Search\")))\n  Store(data.all.prob.2way.srch)\n  \n  fn.clean.worker()\n}\nfn.kill.wk()\n\ntoc()\n",
    "created" : 1439587412122.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2214635878",
    "id" : "8C2E7945",
    "lastKnownWriteTime" : 1439664336,
    "path" : "~/Documents/eclipse/AvitoContext2015/final_model/avito-context-click-r/data.build.R",
    "project_path" : "data.build.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}